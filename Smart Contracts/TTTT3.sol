// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1

/**
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░▒▒░░░░░▒▒▒░░░▒▒░░░░░░░░░░▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█████████████████████▒▒░▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░▒▒░░▒▒▒▒▒▒▒▒▒▒▒░░░░▒▒▒▒░░░░░▒▒▒▒▒███████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███████░░▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░
░░░▒▒▒▒▒░░░░░▒░░░░░░░░░░░░░░▒▒▒▒████▒▒▒▒▒▒▒▒███████████████████▒▒▒▒▒▒▒▒████▒▒░░░░░░░░░░░░░░░░░░░░░░░
░░░░▒░░░░░░░░░░░░░░░░░▒▒░▒▒▒████▒▒▒▒▒███████░░░░░░░░▒▒░░░░░░░░░███████▒▒▒▒███▒░░░░░░▒░░░░░░░░░░░░░░░
░░░▒▒▒░░░░░░░░░░░░░░▒▒▒▒▒███▒▒▒▒░████░░░░░▒░░░░░░░░▄▄▄▄░░░░░░░░░░░░▒▒████░░░▒███░░░░▒▒░░░░░░░░░░░░░░
░░░▒▒▒░░░░░░░░░░░▒▒▒▒▒███▒▒▒▒████░░░░░░▒░▒▒░░░░░░░░████▌░░░░░░░░░░░░░░░░░███░▒▒▒██▒▒▒▒▒▒░░░░░░░░░░░░
░░░▒▒▒░░░░░░░░░▒▒▒▒▒▒█▒▒▒▒████░░░░░░░█████░░░░░░░░░████░░░░░░░░█████░░░░░░░░███░▒▒██▒▒▒▒▒░░░░░░░░░░░
░░░░▒░░░░░░░░▒▒▒▒▒▒██▒▒████░░░░░▒░▒▒▒████░░░░░░░░░░░▒▒░░░░░░░░░████░░░░░░░░░░░░██░▒▒██▒▒▒▒░░░░░░░░░░
░░░░▒░░░░░░░░▒▒▒▒██▒▒░██░░░░░█░▒▒▒▒▒▒░░░░░░▒░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░░██░░░░░░██░▒▒██▒▒▒░░░░░░░░░
░░░░▒░░░░░░░▒▒▒██▒░░██▒░░░░█████▒░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░████░░░░░░░██░▒▒██▒▒▒░░░░░░░
░░░░░░░░▒▒▒▒▒▒█▒▒░██▒░░░░░░░███░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░██░░░░░░░░░██░▒▒█▒▒▒░░░░░░
░░░░░░░░▒▒▒▒▒█▒░██░▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒░░░░▒▒░░░░░▒▒▒▒▒▒░░░░░░░░░░░██░░░██▒▒██▒▒░░░░░
░░░░░░░░▒▒▒▒█▒▒█▒░░░░░█▒░░░░░░░░░░░░░░░███████░░░░░░▒▒░░░░░░░░▒███████░░░░░░░░░░░███░░░░██▒▒██▒▒░░░░
░░░░░░░▒▒▒▒█▒░█▒░░░░████░░░░░░░░░░░██████████████░░░▒▒░░░░░░████████████░░░░░░░░░░███░░░░██░▒██▒▒░░░
░░░░░░▒▒▒▒█▒░█▒░░░░░▒███░░░░▒▒░░████████████████████░▒░░░██████████████████░░░░░░░░░░░░░░░░█░▒█▒▒▒▒░
░░░░░░▒▒▒▒█▒█▒░░░░░▒▒░░░░░░░▒░██████████████████████████████████████████████░░░░░░░░░░░░░░░░█░▒█▒▒▒▒
░░░░░▒▒▒▒█░▒█░░░░█░▒░░░░░░░▒▒███████████████▒▒█████▀███▒██████▒██████████████░░░░░░░░░░░░░░░░█░▒█▒▒▒
░░░░░▒▒▒█░▒█░░░████▒░░░░░░▒▒██████████████▒▀▄▄▄▄▄▒▒▒▒█░▒████▒▒████████████████░░░░░░░░░░███░░▒█▒▒█▒▒
░░░░░▒▒▒█░█▒░░░████░░░░░░░▒█████████████████▒▒█▒▒▀▒▒▒▒▒▒▄▄▄█▀██████████████████░░░░░░░█████░░▒░█▒█░▒
░░░▒░▒▒█░▒█░░░░░░░▒▒░░░░░▒▒███████████████▒███▒█▒██▒▒▒░▒▒▒█▄▒▒▒▒▒██████████████░░░░░░░░███░░░░░█░▒█░
░░░▒▒▒▒█▒█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒███████████▒▒▒█████▒▒▒█▒▒▒▒▒▌▒██████████████████████░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█▒█░
░░░▒▒▒▒█▒█░░░░░░░░░▒░░░░░▒▒████████████▄▒▒▒▒▒▒██▌▒▒▄▒▒▒████████▒██▒████████████░░░░░░░░░░░░░░░░░█▒█▒
░░░▒▒▒▒█▒█▒░░░░░░░░░░░░░░░▒█████████████████▒▒▀▒▒████▒▒▒▒▒▒▒▒▒▒▒▒▒▒████████████░░░░░░░░░░░░░░░░▒█▒█▒
░░░▒▒▒▒█▒█▒▒▄███░░░░░░░░░░░░██████████████░███████████░████▒▒▒▒███████████████░░░░░░░░░░░░▄██▄░▒█▒█▒
░░░░▒▒▒█▒█▒██████▒▒▒▒▒▒▒▒▒▒▒███████████▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░███████▒▒▒▒▒▒▒█████████▒▒▒▒▒▒▒▒▒▒▒██████▒█▒█▒
░░░░▒▒▒█▒█░░▀██▀░░░░░░░░░░░░░███████████▒▒███▒████████░██████████████████████▒░░░░░░░░░░░░▀██▌▒▒█▒█▒
░░░░▒▒▒█▒█▒░░░░░░░░░░░░░░░░░░░████████████▒▒▒█████████░██▀▒▄████████████████▒░░░░░░░░░░░░░░░░░▒▒█▒█▒
░░░░▒▒▒█▒█▒░░░░░░░░░░░░░░░░░░░░███████████████████▒▀▀▀▒▄▒▐█████████████████▒░░░░░░░░░░░░░░░░░░░░█▒█▒
░░░░▒▒▒█▒█▒▒░░░░░░░░░░░░░░░░░░░░░█████████████████████░██████████████████▒░░░░░░░░░░░░░░░░░░░░░░█▒█▒
░░░░▒▒▒█░▒█▒▒░████░░░░░░░░░░░░░░░░░░██████████▒▄▄▄▄▒▒▒░████████████████░░░░░░░░░░░░░░░█░██░░░░░█▒▒█▒
░░░░▒▒▒▒█▒█▒░█████░░░░░░░░░░░░░░░░░░░░████████████████░██████████████░░░░░░░░░░░░░░░░░████░░░░▒█▒█▒▒
░░░░▒░▒▒█░▒█▒▒████░░░░░░░░░░░░░░░░░░░░░░██████████████▒▒▀▒████▀████░░░░░░░░▒▒░░░░░░░░░░░█░░░░▒█▒░█▒▒
░░░░░░▒▒▒█▒█▒▒▒▒░░░░░░░░░░░░▒▒▒░░░░░░░░░░░████████████░██▒▒▀▀▒███░░░░░░▒▒▒▒▒▒░░░░░░░░░░░░░░░▒▒█▒█▒▒░
░░░░░░░░▒█░▒█░░▒▒░░░░░░░░░░░░▒▒▒░░░░░░░░░░░░██████████░████████░░░░░░░▒▒▒░░░░░░░░░░░█░░░░░░░▒█▒▒█▒▒░
░░░░░░░░▒▒█░▒█░░░░░█████░░░░░░░▒▒▒░░░░░░░░░░░░████████░██████░░▒▒▒░░░░░▒▒░░░░░░░░░░████░░░░▒█▒▒█▒▒░░
░░░░░░░░░▒▒█░▒██░░░████░░░░░░░░░░▒▒▒░░░░░░░░░░░░██████░████▒░▒▒▒░░░░░▒▒▒░░░░░░░░░░░██░░░░░▒█▒░█▒▒▒░░
░░░░░░░░░░▒▒█▒▒░█░░░░██░░░░░░░░░░░░▒▒▒░░░░░░░░░░░█████░███▒▒▒░░░░░▒▒▒▒▒░░░░░░█░░░░░░░▒░░▒▒█▒░█▒▒░░░░
░░░░░░░░░░░▒░██▒░██░░░░░░░░░███░░░░░▒▒▒▒░░░░░░░░░░░███░██░░░░░░▒▒▒▒▒▒░░░░░░░███░░░░░░░░░██░░█▒▒░░░░░
░░░░░░░░░░░░░░░█▒░██▒▒░░░░░██████░░░░░▒▒░░░░░░░░░░░░██░█░░░░░░░▒░░░░░░░░░░░█████░░░░░░▒█▒░▒█▒▒▒░░░░░
░░░░░░░░░░░░░░░░█▒░░██▒░░░░░███░░░░░░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░░░░░░█░██░░░░░▒██░▒██▒▒▒░░░░░░
░░░░░░░░░░░░░░░░░██░░▒██▒░░░░░░█░░░░░░░░░░░░░░░░░░░░░▒░░░░░░░░░░░░█░░░░░░░░░░░░░░░▒██▒▒▒██▒▒▒░░░░░░░
░░░░░░░░░░░░░░░░░░░██░░░███░░░░░░░░░░░░███░░░░░░░░░░░▒░░░░░░░░░░░█████░░░░░░░░▒░░██░▒▒██▒▒▒░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░▒██░░░░██░░░░░░░░█████░░░░░░░░░░░▄░░░░░░░░░░█████░░░░░░░░▒███▒▒▒██▒▒▒░▒░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░███░░░██░░░░░░█░███░░░░░░░░░▄███▄░░░░░░░░░░█░░░░░░░░▒██░▒▒▒██▒▒▒▒▒▒░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒░███▒░▒▒░░░░░░░░░░░░░█████░░░░░░░░░░░░░░░░▒███▒▒▒███▒▒▒▒▒▒░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░██▒▒▒▒█████░░░░░░░░░░░░░░▀▀░░░░░░░░░░░███████▒▒▒▒██░░░░▒▒░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░███▒▒▒▒▒░███████░░░░░░░▒░░░░░▒▒░░████▒▒▒▒▒▒▒███░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█████▒▒▒▒▒▒███████████████████░▒▒▒▒██████░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒░█████▒▒▒▒▒▒▒▒▒░▒░▒▒▒▒▒▒▒▒▒████▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒█████████████████████▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

                                    Tomorrow Tree Test Token version 3

----------------------------------------------------------------------------------------------------

An interdisciplinary blockchain - governed decentralized community votes on whether an individual
afforestation project is funded or not based on submitted evidence.

----------------------------------------------------------------------------------------------------
                                        Tomorrow Tree dev Team Credits:

Klemen Skornišek - Founder, Chief Executive, Solidity
https://github.com/klemengititdone

Vid Kališnik - Solidity
https://github.com/VidKalisnik

Erik Jere - React, Google maps API, UX, Moralis
https://github.com/erikjere

Gregor Bučar - Web3.js, Moralis
https://github.com/gbucar

Erika Blekač - UX, UI, Design
https://github.com/ComradeEry

Tomorrow Tree:
https://tomorrowtree.org/
https://github.com/TomorrowTree

Text art by @paolina.paunova_nagana
----------------------------------------------------------------------------------------------------
                                            !!!! IMPORTANT: !!!!
----------------------------------------------------------------------------------------------------
Contract is pausable and destructable. Once the prototype test version 3 has served its use and a 
new version is available we will notify all existing users to migrate through: our website, social 
media and email. After the migration the contract will be paused, and later destroyed.

----------------------------------------------------------------------------------------------------
 */

pragma solidity ^0.8.2;

import "@openzeppelin/contracts@4.4.2/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts@4.4.2/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts@4.4.2/token/ERC20/extensions/ERC20Snapshot.sol";
import "@openzeppelin/contracts@4.4.2/security/Pausable.sol";

contract TomorrowTreeTestToken3 is ERC20, ERC20Burnable, ERC20Snapshot, Pausable {
    
    address TomorrowTree; //owner and admin
    address Minter; // The Project Voting Smart Contract mints tokens upon community approval
    address payable TomorrowTreeDestroy; //used for destroying the Test Token contract

    event OwnershipTransferred(address indexed _oldOwner, address indexed _newOwner);
    event MintershipTransferred(address indexed _oldMinter, address indexed _newMinter);

    constructor() ERC20("Tomorrow Tree Test Token 3", "TTTT3") {
        TomorrowTree = msg.sender;
        Minter = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == TomorrowTree, "Only the owner can access this function");
        _;
    }

    modifier onlyMinter() {
        require(msg.sender == Minter, "Only the Minter can access this function" );
        _;
    }

    function changeOwner(address _newOwner) external onlyOwner {
        address _oldOwner = TomorrowTree;
        TomorrowTree = _newOwner;
        emit OwnershipTransferred(_oldOwner, _newOwner);
    }

function changeMinter(address _newMinter) external onlyOwner {
        address _oldMinter = Minter;
        Minter = _newMinter;
        emit MintershipTransferred(_oldMinter, _newMinter);
    }

    function snapshot() public onlyOwner {
        _snapshot();
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function mint(address to, uint256 amount) public onlyMinter {
        _mint(to, amount);
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount)
        internal
        whenNotPaused
        override(ERC20, ERC20Snapshot)
    {
        super._beforeTokenTransfer(from, to, amount);
    }
    
    function setDestroyAddress(address payable _DestroyAddress) onlyOwner external {
        TomorrowTreeDestroy = _DestroyAddress;
    }

    //must transfer ownership to TomorrowTreeDestroy before evoking
    function destroyContract() public onlyOwner { 
    selfdestruct(TomorrowTreeDestroy);
    }

}
